<?php
/**
 * ModelsWMessage
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.16
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ModelsWMessage Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ModelsWMessage implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'models.WMessage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'int',
        'groups' => 'object',
        'ipid' => 'int',
        'message_type' => 'string',
        'message_uuid' => 'string',
        'mock_message' => 'bool',
        'mock_time_shift' => 'int',
        'smtp_code' => 'int',
        'smtp_description' => 'string',
        'sub_account_id' => 'int',
        'to' => 'string',
        'type' => '\Swagger\Client\Model\ModelsEventType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => 'int64',
        'groups' => null,
        'ipid' => 'int64',
        'message_type' => null,
        'message_uuid' => null,
        'mock_message' => null,
        'mock_time_shift' => 'int64',
        'smtp_code' => 'int64',
        'smtp_description' => null,
        'sub_account_id' => 'int64',
        'to' => null,
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'AccountID',
        'groups' => 'Groups',
        'ipid' => 'IPID',
        'message_type' => 'MessageType',
        'message_uuid' => 'MessageUUID',
        'mock_message' => 'MockMessage',
        'mock_time_shift' => 'MockTimeShift',
        'smtp_code' => 'SMTPCode',
        'smtp_description' => 'SMTPDescription',
        'sub_account_id' => 'SubAccountID',
        'to' => 'To',
        'type' => 'Type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'groups' => 'setGroups',
        'ipid' => 'setIpid',
        'message_type' => 'setMessageType',
        'message_uuid' => 'setMessageUuid',
        'mock_message' => 'setMockMessage',
        'mock_time_shift' => 'setMockTimeShift',
        'smtp_code' => 'setSmtpCode',
        'smtp_description' => 'setSmtpDescription',
        'sub_account_id' => 'setSubAccountId',
        'to' => 'setTo',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'groups' => 'getGroups',
        'ipid' => 'getIpid',
        'message_type' => 'getMessageType',
        'message_uuid' => 'getMessageUuid',
        'mock_message' => 'getMockMessage',
        'mock_time_shift' => 'getMockTimeShift',
        'smtp_code' => 'getSmtpCode',
        'smtp_description' => 'getSmtpDescription',
        'sub_account_id' => 'getSubAccountId',
        'to' => 'getTo',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['groups'] = isset($data['groups']) ? $data['groups'] : null;
        $this->container['ipid'] = isset($data['ipid']) ? $data['ipid'] : null;
        $this->container['message_type'] = isset($data['message_type']) ? $data['message_type'] : null;
        $this->container['message_uuid'] = isset($data['message_uuid']) ? $data['message_uuid'] : null;
        $this->container['mock_message'] = isset($data['mock_message']) ? $data['mock_message'] : null;
        $this->container['mock_time_shift'] = isset($data['mock_time_shift']) ? $data['mock_time_shift'] : null;
        $this->container['smtp_code'] = isset($data['smtp_code']) ? $data['smtp_code'] : null;
        $this->container['smtp_description'] = isset($data['smtp_description']) ? $data['smtp_description'] : null;
        $this->container['sub_account_id'] = isset($data['sub_account_id']) ? $data['sub_account_id'] : null;
        $this->container['to'] = isset($data['to']) ? $data['to'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return int
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return object
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param object $groups groups
     *
     * @return $this
     */
    public function setGroups($groups)
    {
        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets ipid
     *
     * @return int
     */
    public function getIpid()
    {
        return $this->container['ipid'];
    }

    /**
     * Sets ipid
     *
     * @param int $ipid ipid
     *
     * @return $this
     */
    public function setIpid($ipid)
    {
        $this->container['ipid'] = $ipid;

        return $this;
    }

    /**
     * Gets message_type
     *
     * @return string
     */
    public function getMessageType()
    {
        return $this->container['message_type'];
    }

    /**
     * Sets message_type
     *
     * @param string $message_type message_type
     *
     * @return $this
     */
    public function setMessageType($message_type)
    {
        $this->container['message_type'] = $message_type;

        return $this;
    }

    /**
     * Gets message_uuid
     *
     * @return string
     */
    public function getMessageUuid()
    {
        return $this->container['message_uuid'];
    }

    /**
     * Sets message_uuid
     *
     * @param string $message_uuid message_uuid
     *
     * @return $this
     */
    public function setMessageUuid($message_uuid)
    {
        $this->container['message_uuid'] = $message_uuid;

        return $this;
    }

    /**
     * Gets mock_message
     *
     * @return bool
     */
    public function getMockMessage()
    {
        return $this->container['mock_message'];
    }

    /**
     * Sets mock_message
     *
     * @param bool $mock_message mock_message
     *
     * @return $this
     */
    public function setMockMessage($mock_message)
    {
        $this->container['mock_message'] = $mock_message;

        return $this;
    }

    /**
     * Gets mock_time_shift
     *
     * @return int
     */
    public function getMockTimeShift()
    {
        return $this->container['mock_time_shift'];
    }

    /**
     * Sets mock_time_shift
     *
     * @param int $mock_time_shift mock_time_shift
     *
     * @return $this
     */
    public function setMockTimeShift($mock_time_shift)
    {
        $this->container['mock_time_shift'] = $mock_time_shift;

        return $this;
    }

    /**
     * Gets smtp_code
     *
     * @return int
     */
    public function getSmtpCode()
    {
        return $this->container['smtp_code'];
    }

    /**
     * Sets smtp_code
     *
     * @param int $smtp_code smtp_code
     *
     * @return $this
     */
    public function setSmtpCode($smtp_code)
    {
        $this->container['smtp_code'] = $smtp_code;

        return $this;
    }

    /**
     * Gets smtp_description
     *
     * @return string
     */
    public function getSmtpDescription()
    {
        return $this->container['smtp_description'];
    }

    /**
     * Sets smtp_description
     *
     * @param string $smtp_description smtp_description
     *
     * @return $this
     */
    public function setSmtpDescription($smtp_description)
    {
        $this->container['smtp_description'] = $smtp_description;

        return $this;
    }

    /**
     * Gets sub_account_id
     *
     * @return int
     */
    public function getSubAccountId()
    {
        return $this->container['sub_account_id'];
    }

    /**
     * Sets sub_account_id
     *
     * @param int $sub_account_id sub_account_id
     *
     * @return $this
     */
    public function setSubAccountId($sub_account_id)
    {
        $this->container['sub_account_id'] = $sub_account_id;

        return $this;
    }

    /**
     * Gets to
     *
     * @return string
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param string $to to
     *
     * @return $this
     */
    public function setTo($to)
    {
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \Swagger\Client\Model\ModelsEventType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \Swagger\Client\Model\ModelsEventType $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


