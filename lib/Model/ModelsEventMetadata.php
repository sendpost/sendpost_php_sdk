<?php
/**
 * ModelsEventMetadata
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ModelsEventMetadata Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ModelsEventMetadata implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'models.EventMetadata';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'clicked_url' => 'string',
        'device' => '\Swagger\Client\Model\UaparserDevice',
        'geo' => '\Swagger\Client\Model\ModelsCity',
        'os' => '\Swagger\Client\Model\UaparserOs',
        'smtp_code' => 'int',
        'smtp_description' => 'string',
        'user_agent' => '\Swagger\Client\Model\UaparserUserAgent'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'clicked_url' => null,
        'device' => null,
        'geo' => null,
        'os' => null,
        'smtp_code' => 'int64',
        'smtp_description' => null,
        'user_agent' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'clicked_url' => 'clickedURL',
        'device' => 'device',
        'geo' => 'geo',
        'os' => 'os',
        'smtp_code' => 'smtpCode',
        'smtp_description' => 'smtpDescription',
        'user_agent' => 'userAgent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'clicked_url' => 'setClickedUrl',
        'device' => 'setDevice',
        'geo' => 'setGeo',
        'os' => 'setOs',
        'smtp_code' => 'setSmtpCode',
        'smtp_description' => 'setSmtpDescription',
        'user_agent' => 'setUserAgent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'clicked_url' => 'getClickedUrl',
        'device' => 'getDevice',
        'geo' => 'getGeo',
        'os' => 'getOs',
        'smtp_code' => 'getSmtpCode',
        'smtp_description' => 'getSmtpDescription',
        'user_agent' => 'getUserAgent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['clicked_url'] = isset($data['clicked_url']) ? $data['clicked_url'] : null;
        $this->container['device'] = isset($data['device']) ? $data['device'] : null;
        $this->container['geo'] = isset($data['geo']) ? $data['geo'] : null;
        $this->container['os'] = isset($data['os']) ? $data['os'] : null;
        $this->container['smtp_code'] = isset($data['smtp_code']) ? $data['smtp_code'] : null;
        $this->container['smtp_description'] = isset($data['smtp_description']) ? $data['smtp_description'] : null;
        $this->container['user_agent'] = isset($data['user_agent']) ? $data['user_agent'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets clicked_url
     *
     * @return string
     */
    public function getClickedUrl()
    {
        return $this->container['clicked_url'];
    }

    /**
     * Sets clicked_url
     *
     * @param string $clicked_url clicked_url
     *
     * @return $this
     */
    public function setClickedUrl($clicked_url)
    {
        $this->container['clicked_url'] = $clicked_url;

        return $this;
    }

    /**
     * Gets device
     *
     * @return \Swagger\Client\Model\UaparserDevice
     */
    public function getDevice()
    {
        return $this->container['device'];
    }

    /**
     * Sets device
     *
     * @param \Swagger\Client\Model\UaparserDevice $device device
     *
     * @return $this
     */
    public function setDevice($device)
    {
        $this->container['device'] = $device;

        return $this;
    }

    /**
     * Gets geo
     *
     * @return \Swagger\Client\Model\ModelsCity
     */
    public function getGeo()
    {
        return $this->container['geo'];
    }

    /**
     * Sets geo
     *
     * @param \Swagger\Client\Model\ModelsCity $geo geo
     *
     * @return $this
     */
    public function setGeo($geo)
    {
        $this->container['geo'] = $geo;

        return $this;
    }

    /**
     * Gets os
     *
     * @return \Swagger\Client\Model\UaparserOs
     */
    public function getOs()
    {
        return $this->container['os'];
    }

    /**
     * Sets os
     *
     * @param \Swagger\Client\Model\UaparserOs $os os
     *
     * @return $this
     */
    public function setOs($os)
    {
        $this->container['os'] = $os;

        return $this;
    }

    /**
     * Gets smtp_code
     *
     * @return int
     */
    public function getSmtpCode()
    {
        return $this->container['smtp_code'];
    }

    /**
     * Sets smtp_code
     *
     * @param int $smtp_code smtp_code
     *
     * @return $this
     */
    public function setSmtpCode($smtp_code)
    {
        $this->container['smtp_code'] = $smtp_code;

        return $this;
    }

    /**
     * Gets smtp_description
     *
     * @return string
     */
    public function getSmtpDescription()
    {
        return $this->container['smtp_description'];
    }

    /**
     * Sets smtp_description
     *
     * @param string $smtp_description smtp_description
     *
     * @return $this
     */
    public function setSmtpDescription($smtp_description)
    {
        $this->container['smtp_description'] = $smtp_description;

        return $this;
    }

    /**
     * Gets user_agent
     *
     * @return \Swagger\Client\Model\UaparserUserAgent
     */
    public function getUserAgent()
    {
        return $this->container['user_agent'];
    }

    /**
     * Sets user_agent
     *
     * @param \Swagger\Client\Model\UaparserUserAgent $user_agent user_agent
     *
     * @return $this
     */
    public function setUserAgent($user_agent)
    {
        $this->container['user_agent'] = $user_agent;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


