<?php
/**
 * ModelsEAccountMember
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ModelsEAccountMember Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ModelsEAccountMember implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'models.EAccountMember';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'company_name' => 'string',
        'current_email_service_provider' => 'string',
        'industry' => 'string',
        'name' => 'string',
        'onboard_q_answered' => 'bool',
        'phone_number' => 'string',
        'sending_volume_per_month' => 'string',
        'uid' => 'string',
        'verify_email' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'company_name' => null,
        'current_email_service_provider' => null,
        'industry' => null,
        'name' => null,
        'onboard_q_answered' => null,
        'phone_number' => null,
        'sending_volume_per_month' => null,
        'uid' => null,
        'verify_email' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'company_name' => 'companyName',
        'current_email_service_provider' => 'currentEmailServiceProvider',
        'industry' => 'industry',
        'name' => 'name',
        'onboard_q_answered' => 'onboardQAnswered',
        'phone_number' => 'phoneNumber',
        'sending_volume_per_month' => 'sendingVolumePerMonth',
        'uid' => 'uid',
        'verify_email' => 'verifyEmail'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'company_name' => 'setCompanyName',
        'current_email_service_provider' => 'setCurrentEmailServiceProvider',
        'industry' => 'setIndustry',
        'name' => 'setName',
        'onboard_q_answered' => 'setOnboardQAnswered',
        'phone_number' => 'setPhoneNumber',
        'sending_volume_per_month' => 'setSendingVolumePerMonth',
        'uid' => 'setUid',
        'verify_email' => 'setVerifyEmail'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'company_name' => 'getCompanyName',
        'current_email_service_provider' => 'getCurrentEmailServiceProvider',
        'industry' => 'getIndustry',
        'name' => 'getName',
        'onboard_q_answered' => 'getOnboardQAnswered',
        'phone_number' => 'getPhoneNumber',
        'sending_volume_per_month' => 'getSendingVolumePerMonth',
        'uid' => 'getUid',
        'verify_email' => 'getVerifyEmail'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['company_name'] = isset($data['company_name']) ? $data['company_name'] : null;
        $this->container['current_email_service_provider'] = isset($data['current_email_service_provider']) ? $data['current_email_service_provider'] : null;
        $this->container['industry'] = isset($data['industry']) ? $data['industry'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['onboard_q_answered'] = isset($data['onboard_q_answered']) ? $data['onboard_q_answered'] : null;
        $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
        $this->container['sending_volume_per_month'] = isset($data['sending_volume_per_month']) ? $data['sending_volume_per_month'] : null;
        $this->container['uid'] = isset($data['uid']) ? $data['uid'] : null;
        $this->container['verify_email'] = isset($data['verify_email']) ? $data['verify_email'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets company_name
     *
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string $company_name company_name
     *
     * @return $this
     */
    public function setCompanyName($company_name)
    {
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets current_email_service_provider
     *
     * @return string
     */
    public function getCurrentEmailServiceProvider()
    {
        return $this->container['current_email_service_provider'];
    }

    /**
     * Sets current_email_service_provider
     *
     * @param string $current_email_service_provider current_email_service_provider
     *
     * @return $this
     */
    public function setCurrentEmailServiceProvider($current_email_service_provider)
    {
        $this->container['current_email_service_provider'] = $current_email_service_provider;

        return $this;
    }

    /**
     * Gets industry
     *
     * @return string
     */
    public function getIndustry()
    {
        return $this->container['industry'];
    }

    /**
     * Sets industry
     *
     * @param string $industry industry
     *
     * @return $this
     */
    public function setIndustry($industry)
    {
        $this->container['industry'] = $industry;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets onboard_q_answered
     *
     * @return bool
     */
    public function getOnboardQAnswered()
    {
        return $this->container['onboard_q_answered'];
    }

    /**
     * Sets onboard_q_answered
     *
     * @param bool $onboard_q_answered onboard_q_answered
     *
     * @return $this
     */
    public function setOnboardQAnswered($onboard_q_answered)
    {
        $this->container['onboard_q_answered'] = $onboard_q_answered;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string $phone_number phone_number
     *
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets sending_volume_per_month
     *
     * @return string
     */
    public function getSendingVolumePerMonth()
    {
        return $this->container['sending_volume_per_month'];
    }

    /**
     * Sets sending_volume_per_month
     *
     * @param string $sending_volume_per_month sending_volume_per_month
     *
     * @return $this
     */
    public function setSendingVolumePerMonth($sending_volume_per_month)
    {
        $this->container['sending_volume_per_month'] = $sending_volume_per_month;

        return $this;
    }

    /**
     * Gets uid
     *
     * @return string
     */
    public function getUid()
    {
        return $this->container['uid'];
    }

    /**
     * Sets uid
     *
     * @param string $uid uid
     *
     * @return $this
     */
    public function setUid($uid)
    {
        $this->container['uid'] = $uid;

        return $this;
    }

    /**
     * Gets verify_email
     *
     * @return bool
     */
    public function getVerifyEmail()
    {
        return $this->container['verify_email'];
    }

    /**
     * Sets verify_email
     *
     * @param bool $verify_email verify_email
     *
     * @return $this
     */
    public function setVerifyEmail($verify_email)
    {
        $this->container['verify_email'] = $verify_email;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


