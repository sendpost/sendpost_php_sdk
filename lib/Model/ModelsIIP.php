<?php
/**
 * ModelsIIP
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ModelsIIP Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ModelsIIP implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'models.IIP';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'back_off_configuration' => '\Swagger\Client\Model\ModelsBackOffConfiguration',
        'back_off_trigger' => '\Swagger\Client\Model\ModelsBackOffTrigger',
        'max_concurrent_connections' => 'int',
        'max_send_per_day' => 'int',
        'max_send_per_hour' => 'int',
        'max_send_per_minute' => 'int',
        'name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'back_off_configuration' => null,
        'back_off_trigger' => null,
        'max_concurrent_connections' => 'int64',
        'max_send_per_day' => 'int64',
        'max_send_per_hour' => 'int64',
        'max_send_per_minute' => 'int64',
        'name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'back_off_configuration' => 'backOffConfiguration',
        'back_off_trigger' => 'backOffTrigger',
        'max_concurrent_connections' => 'maxConcurrentConnections',
        'max_send_per_day' => 'maxSendPerDay',
        'max_send_per_hour' => 'maxSendPerHour',
        'max_send_per_minute' => 'maxSendPerMinute',
        'name' => 'name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'back_off_configuration' => 'setBackOffConfiguration',
        'back_off_trigger' => 'setBackOffTrigger',
        'max_concurrent_connections' => 'setMaxConcurrentConnections',
        'max_send_per_day' => 'setMaxSendPerDay',
        'max_send_per_hour' => 'setMaxSendPerHour',
        'max_send_per_minute' => 'setMaxSendPerMinute',
        'name' => 'setName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'back_off_configuration' => 'getBackOffConfiguration',
        'back_off_trigger' => 'getBackOffTrigger',
        'max_concurrent_connections' => 'getMaxConcurrentConnections',
        'max_send_per_day' => 'getMaxSendPerDay',
        'max_send_per_hour' => 'getMaxSendPerHour',
        'max_send_per_minute' => 'getMaxSendPerMinute',
        'name' => 'getName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['back_off_configuration'] = isset($data['back_off_configuration']) ? $data['back_off_configuration'] : null;
        $this->container['back_off_trigger'] = isset($data['back_off_trigger']) ? $data['back_off_trigger'] : null;
        $this->container['max_concurrent_connections'] = isset($data['max_concurrent_connections']) ? $data['max_concurrent_connections'] : null;
        $this->container['max_send_per_day'] = isset($data['max_send_per_day']) ? $data['max_send_per_day'] : null;
        $this->container['max_send_per_hour'] = isset($data['max_send_per_hour']) ? $data['max_send_per_hour'] : null;
        $this->container['max_send_per_minute'] = isset($data['max_send_per_minute']) ? $data['max_send_per_minute'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets back_off_configuration
     *
     * @return \Swagger\Client\Model\ModelsBackOffConfiguration
     */
    public function getBackOffConfiguration()
    {
        return $this->container['back_off_configuration'];
    }

    /**
     * Sets back_off_configuration
     *
     * @param \Swagger\Client\Model\ModelsBackOffConfiguration $back_off_configuration back_off_configuration
     *
     * @return $this
     */
    public function setBackOffConfiguration($back_off_configuration)
    {
        $this->container['back_off_configuration'] = $back_off_configuration;

        return $this;
    }

    /**
     * Gets back_off_trigger
     *
     * @return \Swagger\Client\Model\ModelsBackOffTrigger
     */
    public function getBackOffTrigger()
    {
        return $this->container['back_off_trigger'];
    }

    /**
     * Sets back_off_trigger
     *
     * @param \Swagger\Client\Model\ModelsBackOffTrigger $back_off_trigger back_off_trigger
     *
     * @return $this
     */
    public function setBackOffTrigger($back_off_trigger)
    {
        $this->container['back_off_trigger'] = $back_off_trigger;

        return $this;
    }

    /**
     * Gets max_concurrent_connections
     *
     * @return int
     */
    public function getMaxConcurrentConnections()
    {
        return $this->container['max_concurrent_connections'];
    }

    /**
     * Sets max_concurrent_connections
     *
     * @param int $max_concurrent_connections max_concurrent_connections
     *
     * @return $this
     */
    public function setMaxConcurrentConnections($max_concurrent_connections)
    {
        $this->container['max_concurrent_connections'] = $max_concurrent_connections;

        return $this;
    }

    /**
     * Gets max_send_per_day
     *
     * @return int
     */
    public function getMaxSendPerDay()
    {
        return $this->container['max_send_per_day'];
    }

    /**
     * Sets max_send_per_day
     *
     * @param int $max_send_per_day max_send_per_day
     *
     * @return $this
     */
    public function setMaxSendPerDay($max_send_per_day)
    {
        $this->container['max_send_per_day'] = $max_send_per_day;

        return $this;
    }

    /**
     * Gets max_send_per_hour
     *
     * @return int
     */
    public function getMaxSendPerHour()
    {
        return $this->container['max_send_per_hour'];
    }

    /**
     * Sets max_send_per_hour
     *
     * @param int $max_send_per_hour max_send_per_hour
     *
     * @return $this
     */
    public function setMaxSendPerHour($max_send_per_hour)
    {
        $this->container['max_send_per_hour'] = $max_send_per_hour;

        return $this;
    }

    /**
     * Gets max_send_per_minute
     *
     * @return int
     */
    public function getMaxSendPerMinute()
    {
        return $this->container['max_send_per_minute'];
    }

    /**
     * Sets max_send_per_minute
     *
     * @param int $max_send_per_minute max_send_per_minute
     *
     * @return $this
     */
    public function setMaxSendPerMinute($max_send_per_minute)
    {
        $this->container['max_send_per_minute'] = $max_send_per_minute;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


