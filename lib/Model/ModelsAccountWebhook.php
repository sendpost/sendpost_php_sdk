<?php
/**
 * ModelsAccountWebhook
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ModelsAccountWebhook Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ModelsAccountWebhook implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'models.AccountWebhook';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'clicked' => 'bool',
        'created' => 'int',
        'delivered' => 'bool',
        'dropped' => 'bool',
        'enabled' => 'bool',
        'hard_bounced' => 'bool',
        'id' => 'int',
        'opened' => 'bool',
        'processed' => 'bool',
        'soft_bounced' => 'bool',
        'spam' => 'bool',
        'unsubscribed' => 'bool',
        'url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'clicked' => null,
        'created' => 'int64',
        'delivered' => null,
        'dropped' => null,
        'enabled' => null,
        'hard_bounced' => null,
        'id' => 'int64',
        'opened' => null,
        'processed' => null,
        'soft_bounced' => null,
        'spam' => null,
        'unsubscribed' => null,
        'url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'clicked' => 'clicked',
        'created' => 'created',
        'delivered' => 'delivered',
        'dropped' => 'dropped',
        'enabled' => 'enabled',
        'hard_bounced' => 'hardBounced',
        'id' => 'id',
        'opened' => 'opened',
        'processed' => 'processed',
        'soft_bounced' => 'softBounced',
        'spam' => 'spam',
        'unsubscribed' => 'unsubscribed',
        'url' => 'url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'clicked' => 'setClicked',
        'created' => 'setCreated',
        'delivered' => 'setDelivered',
        'dropped' => 'setDropped',
        'enabled' => 'setEnabled',
        'hard_bounced' => 'setHardBounced',
        'id' => 'setId',
        'opened' => 'setOpened',
        'processed' => 'setProcessed',
        'soft_bounced' => 'setSoftBounced',
        'spam' => 'setSpam',
        'unsubscribed' => 'setUnsubscribed',
        'url' => 'setUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'clicked' => 'getClicked',
        'created' => 'getCreated',
        'delivered' => 'getDelivered',
        'dropped' => 'getDropped',
        'enabled' => 'getEnabled',
        'hard_bounced' => 'getHardBounced',
        'id' => 'getId',
        'opened' => 'getOpened',
        'processed' => 'getProcessed',
        'soft_bounced' => 'getSoftBounced',
        'spam' => 'getSpam',
        'unsubscribed' => 'getUnsubscribed',
        'url' => 'getUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['clicked'] = isset($data['clicked']) ? $data['clicked'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['delivered'] = isset($data['delivered']) ? $data['delivered'] : null;
        $this->container['dropped'] = isset($data['dropped']) ? $data['dropped'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['hard_bounced'] = isset($data['hard_bounced']) ? $data['hard_bounced'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['opened'] = isset($data['opened']) ? $data['opened'] : null;
        $this->container['processed'] = isset($data['processed']) ? $data['processed'] : null;
        $this->container['soft_bounced'] = isset($data['soft_bounced']) ? $data['soft_bounced'] : null;
        $this->container['spam'] = isset($data['spam']) ? $data['spam'] : null;
        $this->container['unsubscribed'] = isset($data['unsubscribed']) ? $data['unsubscribed'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets clicked
     *
     * @return bool
     */
    public function getClicked()
    {
        return $this->container['clicked'];
    }

    /**
     * Sets clicked
     *
     * @param bool $clicked clicked
     *
     * @return $this
     */
    public function setClicked($clicked)
    {
        $this->container['clicked'] = $clicked;

        return $this;
    }

    /**
     * Gets created
     *
     * @return int
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param int $created created
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets delivered
     *
     * @return bool
     */
    public function getDelivered()
    {
        return $this->container['delivered'];
    }

    /**
     * Sets delivered
     *
     * @param bool $delivered delivered
     *
     * @return $this
     */
    public function setDelivered($delivered)
    {
        $this->container['delivered'] = $delivered;

        return $this;
    }

    /**
     * Gets dropped
     *
     * @return bool
     */
    public function getDropped()
    {
        return $this->container['dropped'];
    }

    /**
     * Sets dropped
     *
     * @param bool $dropped dropped
     *
     * @return $this
     */
    public function setDropped($dropped)
    {
        $this->container['dropped'] = $dropped;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets hard_bounced
     *
     * @return bool
     */
    public function getHardBounced()
    {
        return $this->container['hard_bounced'];
    }

    /**
     * Sets hard_bounced
     *
     * @param bool $hard_bounced hard_bounced
     *
     * @return $this
     */
    public function setHardBounced($hard_bounced)
    {
        $this->container['hard_bounced'] = $hard_bounced;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets opened
     *
     * @return bool
     */
    public function getOpened()
    {
        return $this->container['opened'];
    }

    /**
     * Sets opened
     *
     * @param bool $opened opened
     *
     * @return $this
     */
    public function setOpened($opened)
    {
        $this->container['opened'] = $opened;

        return $this;
    }

    /**
     * Gets processed
     *
     * @return bool
     */
    public function getProcessed()
    {
        return $this->container['processed'];
    }

    /**
     * Sets processed
     *
     * @param bool $processed processed
     *
     * @return $this
     */
    public function setProcessed($processed)
    {
        $this->container['processed'] = $processed;

        return $this;
    }

    /**
     * Gets soft_bounced
     *
     * @return bool
     */
    public function getSoftBounced()
    {
        return $this->container['soft_bounced'];
    }

    /**
     * Sets soft_bounced
     *
     * @param bool $soft_bounced soft_bounced
     *
     * @return $this
     */
    public function setSoftBounced($soft_bounced)
    {
        $this->container['soft_bounced'] = $soft_bounced;

        return $this;
    }

    /**
     * Gets spam
     *
     * @return bool
     */
    public function getSpam()
    {
        return $this->container['spam'];
    }

    /**
     * Sets spam
     *
     * @param bool $spam spam
     *
     * @return $this
     */
    public function setSpam($spam)
    {
        $this->container['spam'] = $spam;

        return $this;
    }

    /**
     * Gets unsubscribed
     *
     * @return bool
     */
    public function getUnsubscribed()
    {
        return $this->container['unsubscribed'];
    }

    /**
     * Sets unsubscribed
     *
     * @param bool $unsubscribed unsubscribed
     *
     * @return $this
     */
    public function setUnsubscribed($unsubscribed)
    {
        $this->container['unsubscribed'] = $unsubscribed;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


