<?php
/**
 * AccountintegrationApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * AccountintegrationApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountintegrationApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation accountIntegrationRouterCount
     *
     * @param  string $x_account_api_key Account API Key (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ModelsCountStat
     */
    public function accountIntegrationRouterCount($x_account_api_key)
    {
        list($response) = $this->accountIntegrationRouterCountWithHttpInfo($x_account_api_key);
        return $response;
    }

    /**
     * Operation accountIntegrationRouterCountWithHttpInfo
     *
     * @param  string $x_account_api_key Account API Key (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ModelsCountStat, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountIntegrationRouterCountWithHttpInfo($x_account_api_key)
    {
        $returnType = '\Swagger\Client\Model\ModelsCountStat';
        $request = $this->accountIntegrationRouterCountRequest($x_account_api_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ModelsCountStat',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountIntegrationRouterCountAsync
     *
     * 
     *
     * @param  string $x_account_api_key Account API Key (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountIntegrationRouterCountAsync($x_account_api_key)
    {
        return $this->accountIntegrationRouterCountAsyncWithHttpInfo($x_account_api_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountIntegrationRouterCountAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $x_account_api_key Account API Key (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountIntegrationRouterCountAsyncWithHttpInfo($x_account_api_key)
    {
        $returnType = '\Swagger\Client\Model\ModelsCountStat';
        $request = $this->accountIntegrationRouterCountRequest($x_account_api_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountIntegrationRouterCount'
     *
     * @param  string $x_account_api_key Account API Key (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountIntegrationRouterCountRequest($x_account_api_key)
    {
        // verify the required parameter 'x_account_api_key' is set
        if ($x_account_api_key === null || (is_array($x_account_api_key) && count($x_account_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_account_api_key when calling accountIntegrationRouterCount'
            );
        }

        $resourcePath = '/account/integration/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_account_api_key !== null) {
            $headerParams['X-Account-ApiKey'] = ObjectSerializer::toHeaderValue($x_account_api_key);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountIntegrationRouterCreate
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  string $itype The integration type you want to create (required)
     * @param  \Swagger\Client\Model\ModelsEIntegration $body The Integration content (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ModelsIntegration
     */
    public function accountIntegrationRouterCreate($x_account_api_key, $itype, $body)
    {
        list($response) = $this->accountIntegrationRouterCreateWithHttpInfo($x_account_api_key, $itype, $body);
        return $response;
    }

    /**
     * Operation accountIntegrationRouterCreateWithHttpInfo
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  string $itype The integration type you want to create (required)
     * @param  \Swagger\Client\Model\ModelsEIntegration $body The Integration content (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ModelsIntegration, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountIntegrationRouterCreateWithHttpInfo($x_account_api_key, $itype, $body)
    {
        $returnType = '\Swagger\Client\Model\ModelsIntegration';
        $request = $this->accountIntegrationRouterCreateRequest($x_account_api_key, $itype, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ModelsIntegration',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountIntegrationRouterCreateAsync
     *
     * 
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  string $itype The integration type you want to create (required)
     * @param  \Swagger\Client\Model\ModelsEIntegration $body The Integration content (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountIntegrationRouterCreateAsync($x_account_api_key, $itype, $body)
    {
        return $this->accountIntegrationRouterCreateAsyncWithHttpInfo($x_account_api_key, $itype, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountIntegrationRouterCreateAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  string $itype The integration type you want to create (required)
     * @param  \Swagger\Client\Model\ModelsEIntegration $body The Integration content (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountIntegrationRouterCreateAsyncWithHttpInfo($x_account_api_key, $itype, $body)
    {
        $returnType = '\Swagger\Client\Model\ModelsIntegration';
        $request = $this->accountIntegrationRouterCreateRequest($x_account_api_key, $itype, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountIntegrationRouterCreate'
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  string $itype The integration type you want to create (required)
     * @param  \Swagger\Client\Model\ModelsEIntegration $body The Integration content (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountIntegrationRouterCreateRequest($x_account_api_key, $itype, $body)
    {
        // verify the required parameter 'x_account_api_key' is set
        if ($x_account_api_key === null || (is_array($x_account_api_key) && count($x_account_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_account_api_key when calling accountIntegrationRouterCreate'
            );
        }
        // verify the required parameter 'itype' is set
        if ($itype === null || (is_array($itype) && count($itype) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $itype when calling accountIntegrationRouterCreate'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling accountIntegrationRouterCreate'
            );
        }

        $resourcePath = '/account/integration/{itype}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_account_api_key !== null) {
            $headerParams['X-Account-ApiKey'] = ObjectSerializer::toHeaderValue($x_account_api_key);
        }

        // path params
        if ($itype !== null) {
            $resourcePath = str_replace(
                '{' . 'itype' . '}',
                ObjectSerializer::toPathValue($itype),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountIntegrationRouterDelete
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  string $itype The integration type you want to update (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ModelsDeleteResponse
     */
    public function accountIntegrationRouterDelete($x_account_api_key, $itype)
    {
        list($response) = $this->accountIntegrationRouterDeleteWithHttpInfo($x_account_api_key, $itype);
        return $response;
    }

    /**
     * Operation accountIntegrationRouterDeleteWithHttpInfo
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  string $itype The integration type you want to update (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ModelsDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountIntegrationRouterDeleteWithHttpInfo($x_account_api_key, $itype)
    {
        $returnType = '\Swagger\Client\Model\ModelsDeleteResponse';
        $request = $this->accountIntegrationRouterDeleteRequest($x_account_api_key, $itype);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ModelsDeleteResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountIntegrationRouterDeleteAsync
     *
     * 
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  string $itype The integration type you want to update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountIntegrationRouterDeleteAsync($x_account_api_key, $itype)
    {
        return $this->accountIntegrationRouterDeleteAsyncWithHttpInfo($x_account_api_key, $itype)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountIntegrationRouterDeleteAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  string $itype The integration type you want to update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountIntegrationRouterDeleteAsyncWithHttpInfo($x_account_api_key, $itype)
    {
        $returnType = '\Swagger\Client\Model\ModelsDeleteResponse';
        $request = $this->accountIntegrationRouterDeleteRequest($x_account_api_key, $itype);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountIntegrationRouterDelete'
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  string $itype The integration type you want to update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountIntegrationRouterDeleteRequest($x_account_api_key, $itype)
    {
        // verify the required parameter 'x_account_api_key' is set
        if ($x_account_api_key === null || (is_array($x_account_api_key) && count($x_account_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_account_api_key when calling accountIntegrationRouterDelete'
            );
        }
        // verify the required parameter 'itype' is set
        if ($itype === null || (is_array($itype) && count($itype) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $itype when calling accountIntegrationRouterDelete'
            );
        }

        $resourcePath = '/account/integration/{itype}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_account_api_key !== null) {
            $headerParams['X-Account-ApiKey'] = ObjectSerializer::toHeaderValue($x_account_api_key);
        }

        // path params
        if ($itype !== null) {
            $resourcePath = str_replace(
                '{' . 'itype' . '}',
                ObjectSerializer::toPathValue($itype),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountIntegrationRouterDisableGlockappsIPMonitoring
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  int $ipid the IPId you want to disable monitoring for (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ModelsDeleteResponse
     */
    public function accountIntegrationRouterDisableGlockappsIPMonitoring($x_account_api_key, $ipid)
    {
        list($response) = $this->accountIntegrationRouterDisableGlockappsIPMonitoringWithHttpInfo($x_account_api_key, $ipid);
        return $response;
    }

    /**
     * Operation accountIntegrationRouterDisableGlockappsIPMonitoringWithHttpInfo
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  int $ipid the IPId you want to disable monitoring for (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ModelsDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountIntegrationRouterDisableGlockappsIPMonitoringWithHttpInfo($x_account_api_key, $ipid)
    {
        $returnType = '\Swagger\Client\Model\ModelsDeleteResponse';
        $request = $this->accountIntegrationRouterDisableGlockappsIPMonitoringRequest($x_account_api_key, $ipid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ModelsDeleteResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountIntegrationRouterDisableGlockappsIPMonitoringAsync
     *
     * 
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  int $ipid the IPId you want to disable monitoring for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountIntegrationRouterDisableGlockappsIPMonitoringAsync($x_account_api_key, $ipid)
    {
        return $this->accountIntegrationRouterDisableGlockappsIPMonitoringAsyncWithHttpInfo($x_account_api_key, $ipid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountIntegrationRouterDisableGlockappsIPMonitoringAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  int $ipid the IPId you want to disable monitoring for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountIntegrationRouterDisableGlockappsIPMonitoringAsyncWithHttpInfo($x_account_api_key, $ipid)
    {
        $returnType = '\Swagger\Client\Model\ModelsDeleteResponse';
        $request = $this->accountIntegrationRouterDisableGlockappsIPMonitoringRequest($x_account_api_key, $ipid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountIntegrationRouterDisableGlockappsIPMonitoring'
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  int $ipid the IPId you want to disable monitoring for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountIntegrationRouterDisableGlockappsIPMonitoringRequest($x_account_api_key, $ipid)
    {
        // verify the required parameter 'x_account_api_key' is set
        if ($x_account_api_key === null || (is_array($x_account_api_key) && count($x_account_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_account_api_key when calling accountIntegrationRouterDisableGlockappsIPMonitoring'
            );
        }
        // verify the required parameter 'ipid' is set
        if ($ipid === null || (is_array($ipid) && count($ipid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ipid when calling accountIntegrationRouterDisableGlockappsIPMonitoring'
            );
        }

        $resourcePath = '/account/integration/glockapps/monitor/{ipid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_account_api_key !== null) {
            $headerParams['X-Account-ApiKey'] = ObjectSerializer::toHeaderValue($x_account_api_key);
        }

        // path params
        if ($ipid !== null) {
            $resourcePath = str_replace(
                '{' . 'ipid' . '}',
                ObjectSerializer::toPathValue($ipid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountIntegrationRouterEnableGlockappsIPMonitoring
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  int $ipid the IPId you want to enable monitoring for (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ModelsResponse
     */
    public function accountIntegrationRouterEnableGlockappsIPMonitoring($x_account_api_key, $ipid)
    {
        list($response) = $this->accountIntegrationRouterEnableGlockappsIPMonitoringWithHttpInfo($x_account_api_key, $ipid);
        return $response;
    }

    /**
     * Operation accountIntegrationRouterEnableGlockappsIPMonitoringWithHttpInfo
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  int $ipid the IPId you want to enable monitoring for (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ModelsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountIntegrationRouterEnableGlockappsIPMonitoringWithHttpInfo($x_account_api_key, $ipid)
    {
        $returnType = '\Swagger\Client\Model\ModelsResponse';
        $request = $this->accountIntegrationRouterEnableGlockappsIPMonitoringRequest($x_account_api_key, $ipid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ModelsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountIntegrationRouterEnableGlockappsIPMonitoringAsync
     *
     * 
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  int $ipid the IPId you want to enable monitoring for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountIntegrationRouterEnableGlockappsIPMonitoringAsync($x_account_api_key, $ipid)
    {
        return $this->accountIntegrationRouterEnableGlockappsIPMonitoringAsyncWithHttpInfo($x_account_api_key, $ipid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountIntegrationRouterEnableGlockappsIPMonitoringAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  int $ipid the IPId you want to enable monitoring for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountIntegrationRouterEnableGlockappsIPMonitoringAsyncWithHttpInfo($x_account_api_key, $ipid)
    {
        $returnType = '\Swagger\Client\Model\ModelsResponse';
        $request = $this->accountIntegrationRouterEnableGlockappsIPMonitoringRequest($x_account_api_key, $ipid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountIntegrationRouterEnableGlockappsIPMonitoring'
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  int $ipid the IPId you want to enable monitoring for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountIntegrationRouterEnableGlockappsIPMonitoringRequest($x_account_api_key, $ipid)
    {
        // verify the required parameter 'x_account_api_key' is set
        if ($x_account_api_key === null || (is_array($x_account_api_key) && count($x_account_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_account_api_key when calling accountIntegrationRouterEnableGlockappsIPMonitoring'
            );
        }
        // verify the required parameter 'ipid' is set
        if ($ipid === null || (is_array($ipid) && count($ipid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ipid when calling accountIntegrationRouterEnableGlockappsIPMonitoring'
            );
        }

        $resourcePath = '/account/integration/glockapps/monitor/{ipid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_account_api_key !== null) {
            $headerParams['X-Account-ApiKey'] = ObjectSerializer::toHeaderValue($x_account_api_key);
        }

        // path params
        if ($ipid !== null) {
            $resourcePath = str_replace(
                '{' . 'ipid' . '}',
                ObjectSerializer::toPathValue($ipid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountIntegrationRouterGetAll
     *
     * @param  string $x_account_api_key Account API Key (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ModelsIntegration[]
     */
    public function accountIntegrationRouterGetAll($x_account_api_key)
    {
        list($response) = $this->accountIntegrationRouterGetAllWithHttpInfo($x_account_api_key);
        return $response;
    }

    /**
     * Operation accountIntegrationRouterGetAllWithHttpInfo
     *
     * @param  string $x_account_api_key Account API Key (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ModelsIntegration[], HTTP status code, HTTP response headers (array of strings)
     */
    public function accountIntegrationRouterGetAllWithHttpInfo($x_account_api_key)
    {
        $returnType = '\Swagger\Client\Model\ModelsIntegration[]';
        $request = $this->accountIntegrationRouterGetAllRequest($x_account_api_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ModelsIntegration[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountIntegrationRouterGetAllAsync
     *
     * 
     *
     * @param  string $x_account_api_key Account API Key (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountIntegrationRouterGetAllAsync($x_account_api_key)
    {
        return $this->accountIntegrationRouterGetAllAsyncWithHttpInfo($x_account_api_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountIntegrationRouterGetAllAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $x_account_api_key Account API Key (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountIntegrationRouterGetAllAsyncWithHttpInfo($x_account_api_key)
    {
        $returnType = '\Swagger\Client\Model\ModelsIntegration[]';
        $request = $this->accountIntegrationRouterGetAllRequest($x_account_api_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountIntegrationRouterGetAll'
     *
     * @param  string $x_account_api_key Account API Key (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountIntegrationRouterGetAllRequest($x_account_api_key)
    {
        // verify the required parameter 'x_account_api_key' is set
        if ($x_account_api_key === null || (is_array($x_account_api_key) && count($x_account_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_account_api_key when calling accountIntegrationRouterGetAll'
            );
        }

        $resourcePath = '/account/integration/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_account_api_key !== null) {
            $headerParams['X-Account-ApiKey'] = ObjectSerializer::toHeaderValue($x_account_api_key);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountIntegrationRouterGetMonitoredIPStats
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  int $ipid the IPId for which you want monitored stats (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ModelsRGlockappsMonitorStat[]
     */
    public function accountIntegrationRouterGetMonitoredIPStats($x_account_api_key, $ipid, $from = null, $to = null)
    {
        list($response) = $this->accountIntegrationRouterGetMonitoredIPStatsWithHttpInfo($x_account_api_key, $ipid, $from, $to);
        return $response;
    }

    /**
     * Operation accountIntegrationRouterGetMonitoredIPStatsWithHttpInfo
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  int $ipid the IPId for which you want monitored stats (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ModelsRGlockappsMonitorStat[], HTTP status code, HTTP response headers (array of strings)
     */
    public function accountIntegrationRouterGetMonitoredIPStatsWithHttpInfo($x_account_api_key, $ipid, $from = null, $to = null)
    {
        $returnType = '\Swagger\Client\Model\ModelsRGlockappsMonitorStat[]';
        $request = $this->accountIntegrationRouterGetMonitoredIPStatsRequest($x_account_api_key, $ipid, $from, $to);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ModelsRGlockappsMonitorStat[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountIntegrationRouterGetMonitoredIPStatsAsync
     *
     * 
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  int $ipid the IPId for which you want monitored stats (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountIntegrationRouterGetMonitoredIPStatsAsync($x_account_api_key, $ipid, $from = null, $to = null)
    {
        return $this->accountIntegrationRouterGetMonitoredIPStatsAsyncWithHttpInfo($x_account_api_key, $ipid, $from, $to)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountIntegrationRouterGetMonitoredIPStatsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  int $ipid the IPId for which you want monitored stats (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountIntegrationRouterGetMonitoredIPStatsAsyncWithHttpInfo($x_account_api_key, $ipid, $from = null, $to = null)
    {
        $returnType = '\Swagger\Client\Model\ModelsRGlockappsMonitorStat[]';
        $request = $this->accountIntegrationRouterGetMonitoredIPStatsRequest($x_account_api_key, $ipid, $from, $to);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountIntegrationRouterGetMonitoredIPStats'
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  int $ipid the IPId for which you want monitored stats (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountIntegrationRouterGetMonitoredIPStatsRequest($x_account_api_key, $ipid, $from = null, $to = null)
    {
        // verify the required parameter 'x_account_api_key' is set
        if ($x_account_api_key === null || (is_array($x_account_api_key) && count($x_account_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_account_api_key when calling accountIntegrationRouterGetMonitoredIPStats'
            );
        }
        // verify the required parameter 'ipid' is set
        if ($ipid === null || (is_array($ipid) && count($ipid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ipid when calling accountIntegrationRouterGetMonitoredIPStats'
            );
        }

        $resourcePath = '/account/integration/glockapps/monitor/stat/{ipid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to);
        }
        // header params
        if ($x_account_api_key !== null) {
            $headerParams['X-Account-ApiKey'] = ObjectSerializer::toHeaderValue($x_account_api_key);
        }

        // path params
        if ($ipid !== null) {
            $resourcePath = str_replace(
                '{' . 'ipid' . '}',
                ObjectSerializer::toPathValue($ipid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountIntegrationRouterUpdate
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  string $itype The integration type you want to update (required)
     * @param  \Swagger\Client\Model\ModelsEIntegration $body The Integration content (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ModelsIntegration
     */
    public function accountIntegrationRouterUpdate($x_account_api_key, $itype, $body)
    {
        list($response) = $this->accountIntegrationRouterUpdateWithHttpInfo($x_account_api_key, $itype, $body);
        return $response;
    }

    /**
     * Operation accountIntegrationRouterUpdateWithHttpInfo
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  string $itype The integration type you want to update (required)
     * @param  \Swagger\Client\Model\ModelsEIntegration $body The Integration content (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ModelsIntegration, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountIntegrationRouterUpdateWithHttpInfo($x_account_api_key, $itype, $body)
    {
        $returnType = '\Swagger\Client\Model\ModelsIntegration';
        $request = $this->accountIntegrationRouterUpdateRequest($x_account_api_key, $itype, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ModelsIntegration',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountIntegrationRouterUpdateAsync
     *
     * 
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  string $itype The integration type you want to update (required)
     * @param  \Swagger\Client\Model\ModelsEIntegration $body The Integration content (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountIntegrationRouterUpdateAsync($x_account_api_key, $itype, $body)
    {
        return $this->accountIntegrationRouterUpdateAsyncWithHttpInfo($x_account_api_key, $itype, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountIntegrationRouterUpdateAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  string $itype The integration type you want to update (required)
     * @param  \Swagger\Client\Model\ModelsEIntegration $body The Integration content (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountIntegrationRouterUpdateAsyncWithHttpInfo($x_account_api_key, $itype, $body)
    {
        $returnType = '\Swagger\Client\Model\ModelsIntegration';
        $request = $this->accountIntegrationRouterUpdateRequest($x_account_api_key, $itype, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountIntegrationRouterUpdate'
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  string $itype The integration type you want to update (required)
     * @param  \Swagger\Client\Model\ModelsEIntegration $body The Integration content (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountIntegrationRouterUpdateRequest($x_account_api_key, $itype, $body)
    {
        // verify the required parameter 'x_account_api_key' is set
        if ($x_account_api_key === null || (is_array($x_account_api_key) && count($x_account_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_account_api_key when calling accountIntegrationRouterUpdate'
            );
        }
        // verify the required parameter 'itype' is set
        if ($itype === null || (is_array($itype) && count($itype) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $itype when calling accountIntegrationRouterUpdate'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling accountIntegrationRouterUpdate'
            );
        }

        $resourcePath = '/account/integration/{itype}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_account_api_key !== null) {
            $headerParams['X-Account-ApiKey'] = ObjectSerializer::toHeaderValue($x_account_api_key);
        }

        // path params
        if ($itype !== null) {
            $resourcePath = str_replace(
                '{' . 'itype' . '}',
                ObjectSerializer::toPathValue($itype),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
