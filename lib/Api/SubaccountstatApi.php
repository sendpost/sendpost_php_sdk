<?php
/**
 * SubaccountstatApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * SubaccountstatApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SubaccountstatApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation subAccountStatRouterGetAllAggregateSubAccountStats
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ModelsStat
     */
    public function subAccountStatRouterGetAllAggregateSubAccountStats($x_sub_account_api_key, $from = null, $to = null)
    {
        list($response) = $this->subAccountStatRouterGetAllAggregateSubAccountStatsWithHttpInfo($x_sub_account_api_key, $from, $to);
        return $response;
    }

    /**
     * Operation subAccountStatRouterGetAllAggregateSubAccountStatsWithHttpInfo
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ModelsStat, HTTP status code, HTTP response headers (array of strings)
     */
    public function subAccountStatRouterGetAllAggregateSubAccountStatsWithHttpInfo($x_sub_account_api_key, $from = null, $to = null)
    {
        $returnType = '\Swagger\Client\Model\ModelsStat';
        $request = $this->subAccountStatRouterGetAllAggregateSubAccountStatsRequest($x_sub_account_api_key, $from, $to);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ModelsStat',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation subAccountStatRouterGetAllAggregateSubAccountStatsAsync
     *
     * 
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subAccountStatRouterGetAllAggregateSubAccountStatsAsync($x_sub_account_api_key, $from = null, $to = null)
    {
        return $this->subAccountStatRouterGetAllAggregateSubAccountStatsAsyncWithHttpInfo($x_sub_account_api_key, $from, $to)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation subAccountStatRouterGetAllAggregateSubAccountStatsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subAccountStatRouterGetAllAggregateSubAccountStatsAsyncWithHttpInfo($x_sub_account_api_key, $from = null, $to = null)
    {
        $returnType = '\Swagger\Client\Model\ModelsStat';
        $request = $this->subAccountStatRouterGetAllAggregateSubAccountStatsRequest($x_sub_account_api_key, $from, $to);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'subAccountStatRouterGetAllAggregateSubAccountStats'
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function subAccountStatRouterGetAllAggregateSubAccountStatsRequest($x_sub_account_api_key, $from = null, $to = null)
    {
        // verify the required parameter 'x_sub_account_api_key' is set
        if ($x_sub_account_api_key === null || (is_array($x_sub_account_api_key) && count($x_sub_account_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_sub_account_api_key when calling subAccountStatRouterGetAllAggregateSubAccountStats'
            );
        }

        $resourcePath = '/subaccount/stat/aggregate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to);
        }
        // header params
        if ($x_sub_account_api_key !== null) {
            $headerParams['X-SubAccount-ApiKey'] = ObjectSerializer::toHeaderValue($x_sub_account_api_key);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation subAccountStatRouterGetAllAggregateSubAccountStatsByGroup
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  string $group the group whose stats you want (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ModelsStat
     */
    public function subAccountStatRouterGetAllAggregateSubAccountStatsByGroup($x_sub_account_api_key, $group, $from = null, $to = null)
    {
        list($response) = $this->subAccountStatRouterGetAllAggregateSubAccountStatsByGroupWithHttpInfo($x_sub_account_api_key, $group, $from, $to);
        return $response;
    }

    /**
     * Operation subAccountStatRouterGetAllAggregateSubAccountStatsByGroupWithHttpInfo
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  string $group the group whose stats you want (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ModelsStat, HTTP status code, HTTP response headers (array of strings)
     */
    public function subAccountStatRouterGetAllAggregateSubAccountStatsByGroupWithHttpInfo($x_sub_account_api_key, $group, $from = null, $to = null)
    {
        $returnType = '\Swagger\Client\Model\ModelsStat';
        $request = $this->subAccountStatRouterGetAllAggregateSubAccountStatsByGroupRequest($x_sub_account_api_key, $group, $from, $to);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ModelsStat',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation subAccountStatRouterGetAllAggregateSubAccountStatsByGroupAsync
     *
     * 
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  string $group the group whose stats you want (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subAccountStatRouterGetAllAggregateSubAccountStatsByGroupAsync($x_sub_account_api_key, $group, $from = null, $to = null)
    {
        return $this->subAccountStatRouterGetAllAggregateSubAccountStatsByGroupAsyncWithHttpInfo($x_sub_account_api_key, $group, $from, $to)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation subAccountStatRouterGetAllAggregateSubAccountStatsByGroupAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  string $group the group whose stats you want (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subAccountStatRouterGetAllAggregateSubAccountStatsByGroupAsyncWithHttpInfo($x_sub_account_api_key, $group, $from = null, $to = null)
    {
        $returnType = '\Swagger\Client\Model\ModelsStat';
        $request = $this->subAccountStatRouterGetAllAggregateSubAccountStatsByGroupRequest($x_sub_account_api_key, $group, $from, $to);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'subAccountStatRouterGetAllAggregateSubAccountStatsByGroup'
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  string $group the group whose stats you want (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function subAccountStatRouterGetAllAggregateSubAccountStatsByGroupRequest($x_sub_account_api_key, $group, $from = null, $to = null)
    {
        // verify the required parameter 'x_sub_account_api_key' is set
        if ($x_sub_account_api_key === null || (is_array($x_sub_account_api_key) && count($x_sub_account_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_sub_account_api_key when calling subAccountStatRouterGetAllAggregateSubAccountStatsByGroup'
            );
        }
        // verify the required parameter 'group' is set
        if ($group === null || (is_array($group) && count($group) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group when calling subAccountStatRouterGetAllAggregateSubAccountStatsByGroup'
            );
        }

        $resourcePath = '/subaccount/stat/aggregate/group';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to);
        }
        // query params
        if ($group !== null) {
            $queryParams['group'] = ObjectSerializer::toQueryValue($group);
        }
        // header params
        if ($x_sub_account_api_key !== null) {
            $headerParams['X-SubAccount-ApiKey'] = ObjectSerializer::toHeaderValue($x_sub_account_api_key);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation subAccountStatRouterGetAllAggregatedGroupStatsForASubAccount
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ModelsAGStat[]
     */
    public function subAccountStatRouterGetAllAggregatedGroupStatsForASubAccount($x_sub_account_api_key, $from = null, $to = null)
    {
        list($response) = $this->subAccountStatRouterGetAllAggregatedGroupStatsForASubAccountWithHttpInfo($x_sub_account_api_key, $from, $to);
        return $response;
    }

    /**
     * Operation subAccountStatRouterGetAllAggregatedGroupStatsForASubAccountWithHttpInfo
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ModelsAGStat[], HTTP status code, HTTP response headers (array of strings)
     */
    public function subAccountStatRouterGetAllAggregatedGroupStatsForASubAccountWithHttpInfo($x_sub_account_api_key, $from = null, $to = null)
    {
        $returnType = '\Swagger\Client\Model\ModelsAGStat[]';
        $request = $this->subAccountStatRouterGetAllAggregatedGroupStatsForASubAccountRequest($x_sub_account_api_key, $from, $to);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ModelsAGStat[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation subAccountStatRouterGetAllAggregatedGroupStatsForASubAccountAsync
     *
     * 
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subAccountStatRouterGetAllAggregatedGroupStatsForASubAccountAsync($x_sub_account_api_key, $from = null, $to = null)
    {
        return $this->subAccountStatRouterGetAllAggregatedGroupStatsForASubAccountAsyncWithHttpInfo($x_sub_account_api_key, $from, $to)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation subAccountStatRouterGetAllAggregatedGroupStatsForASubAccountAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subAccountStatRouterGetAllAggregatedGroupStatsForASubAccountAsyncWithHttpInfo($x_sub_account_api_key, $from = null, $to = null)
    {
        $returnType = '\Swagger\Client\Model\ModelsAGStat[]';
        $request = $this->subAccountStatRouterGetAllAggregatedGroupStatsForASubAccountRequest($x_sub_account_api_key, $from, $to);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'subAccountStatRouterGetAllAggregatedGroupStatsForASubAccount'
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function subAccountStatRouterGetAllAggregatedGroupStatsForASubAccountRequest($x_sub_account_api_key, $from = null, $to = null)
    {
        // verify the required parameter 'x_sub_account_api_key' is set
        if ($x_sub_account_api_key === null || (is_array($x_sub_account_api_key) && count($x_sub_account_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_sub_account_api_key when calling subAccountStatRouterGetAllAggregatedGroupStatsForASubAccount'
            );
        }

        $resourcePath = '/subaccount/stat/aggregate/groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to);
        }
        // header params
        if ($x_sub_account_api_key !== null) {
            $headerParams['X-SubAccount-ApiKey'] = ObjectSerializer::toHeaderValue($x_sub_account_api_key);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation subAccountStatRouterGetAllAggregatedIPStatsForASubAccount
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ModelsAIPStat[]
     */
    public function subAccountStatRouterGetAllAggregatedIPStatsForASubAccount($x_sub_account_api_key, $from = null, $to = null)
    {
        list($response) = $this->subAccountStatRouterGetAllAggregatedIPStatsForASubAccountWithHttpInfo($x_sub_account_api_key, $from, $to);
        return $response;
    }

    /**
     * Operation subAccountStatRouterGetAllAggregatedIPStatsForASubAccountWithHttpInfo
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ModelsAIPStat[], HTTP status code, HTTP response headers (array of strings)
     */
    public function subAccountStatRouterGetAllAggregatedIPStatsForASubAccountWithHttpInfo($x_sub_account_api_key, $from = null, $to = null)
    {
        $returnType = '\Swagger\Client\Model\ModelsAIPStat[]';
        $request = $this->subAccountStatRouterGetAllAggregatedIPStatsForASubAccountRequest($x_sub_account_api_key, $from, $to);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ModelsAIPStat[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation subAccountStatRouterGetAllAggregatedIPStatsForASubAccountAsync
     *
     * 
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subAccountStatRouterGetAllAggregatedIPStatsForASubAccountAsync($x_sub_account_api_key, $from = null, $to = null)
    {
        return $this->subAccountStatRouterGetAllAggregatedIPStatsForASubAccountAsyncWithHttpInfo($x_sub_account_api_key, $from, $to)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation subAccountStatRouterGetAllAggregatedIPStatsForASubAccountAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subAccountStatRouterGetAllAggregatedIPStatsForASubAccountAsyncWithHttpInfo($x_sub_account_api_key, $from = null, $to = null)
    {
        $returnType = '\Swagger\Client\Model\ModelsAIPStat[]';
        $request = $this->subAccountStatRouterGetAllAggregatedIPStatsForASubAccountRequest($x_sub_account_api_key, $from, $to);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'subAccountStatRouterGetAllAggregatedIPStatsForASubAccount'
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function subAccountStatRouterGetAllAggregatedIPStatsForASubAccountRequest($x_sub_account_api_key, $from = null, $to = null)
    {
        // verify the required parameter 'x_sub_account_api_key' is set
        if ($x_sub_account_api_key === null || (is_array($x_sub_account_api_key) && count($x_sub_account_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_sub_account_api_key when calling subAccountStatRouterGetAllAggregatedIPStatsForASubAccount'
            );
        }

        $resourcePath = '/subaccount/stat/aggregate/ips';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to);
        }
        // header params
        if ($x_sub_account_api_key !== null) {
            $headerParams['X-SubAccount-ApiKey'] = ObjectSerializer::toHeaderValue($x_sub_account_api_key);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation subAccountStatRouterGetAllAggregatedProviderStatsForASpecificIPOfASubAccount
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  int $ipid the IPId you want to get (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ModelsPIPStat[]
     */
    public function subAccountStatRouterGetAllAggregatedProviderStatsForASpecificIPOfASubAccount($x_sub_account_api_key, $ipid, $from = null, $to = null)
    {
        list($response) = $this->subAccountStatRouterGetAllAggregatedProviderStatsForASpecificIPOfASubAccountWithHttpInfo($x_sub_account_api_key, $ipid, $from, $to);
        return $response;
    }

    /**
     * Operation subAccountStatRouterGetAllAggregatedProviderStatsForASpecificIPOfASubAccountWithHttpInfo
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  int $ipid the IPId you want to get (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ModelsPIPStat[], HTTP status code, HTTP response headers (array of strings)
     */
    public function subAccountStatRouterGetAllAggregatedProviderStatsForASpecificIPOfASubAccountWithHttpInfo($x_sub_account_api_key, $ipid, $from = null, $to = null)
    {
        $returnType = '\Swagger\Client\Model\ModelsPIPStat[]';
        $request = $this->subAccountStatRouterGetAllAggregatedProviderStatsForASpecificIPOfASubAccountRequest($x_sub_account_api_key, $ipid, $from, $to);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ModelsPIPStat[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation subAccountStatRouterGetAllAggregatedProviderStatsForASpecificIPOfASubAccountAsync
     *
     * 
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  int $ipid the IPId you want to get (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subAccountStatRouterGetAllAggregatedProviderStatsForASpecificIPOfASubAccountAsync($x_sub_account_api_key, $ipid, $from = null, $to = null)
    {
        return $this->subAccountStatRouterGetAllAggregatedProviderStatsForASpecificIPOfASubAccountAsyncWithHttpInfo($x_sub_account_api_key, $ipid, $from, $to)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation subAccountStatRouterGetAllAggregatedProviderStatsForASpecificIPOfASubAccountAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  int $ipid the IPId you want to get (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subAccountStatRouterGetAllAggregatedProviderStatsForASpecificIPOfASubAccountAsyncWithHttpInfo($x_sub_account_api_key, $ipid, $from = null, $to = null)
    {
        $returnType = '\Swagger\Client\Model\ModelsPIPStat[]';
        $request = $this->subAccountStatRouterGetAllAggregatedProviderStatsForASpecificIPOfASubAccountRequest($x_sub_account_api_key, $ipid, $from, $to);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'subAccountStatRouterGetAllAggregatedProviderStatsForASpecificIPOfASubAccount'
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  int $ipid the IPId you want to get (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function subAccountStatRouterGetAllAggregatedProviderStatsForASpecificIPOfASubAccountRequest($x_sub_account_api_key, $ipid, $from = null, $to = null)
    {
        // verify the required parameter 'x_sub_account_api_key' is set
        if ($x_sub_account_api_key === null || (is_array($x_sub_account_api_key) && count($x_sub_account_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_sub_account_api_key when calling subAccountStatRouterGetAllAggregatedProviderStatsForASpecificIPOfASubAccount'
            );
        }
        // verify the required parameter 'ipid' is set
        if ($ipid === null || (is_array($ipid) && count($ipid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ipid when calling subAccountStatRouterGetAllAggregatedProviderStatsForASpecificIPOfASubAccount'
            );
        }

        $resourcePath = '/subaccount/stat/aggregate/ip/{ipid}/providers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to);
        }
        // header params
        if ($x_sub_account_api_key !== null) {
            $headerParams['X-SubAccount-ApiKey'] = ObjectSerializer::toHeaderValue($x_sub_account_api_key);
        }

        // path params
        if ($ipid !== null) {
            $resourcePath = str_replace(
                '{' . 'ipid' . '}',
                ObjectSerializer::toPathValue($ipid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation subAccountStatRouterGetAllAggregatedProviderStatsForASubAccount
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ModelsPIPStat[]
     */
    public function subAccountStatRouterGetAllAggregatedProviderStatsForASubAccount($x_sub_account_api_key, $from = null, $to = null)
    {
        list($response) = $this->subAccountStatRouterGetAllAggregatedProviderStatsForASubAccountWithHttpInfo($x_sub_account_api_key, $from, $to);
        return $response;
    }

    /**
     * Operation subAccountStatRouterGetAllAggregatedProviderStatsForASubAccountWithHttpInfo
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ModelsPIPStat[], HTTP status code, HTTP response headers (array of strings)
     */
    public function subAccountStatRouterGetAllAggregatedProviderStatsForASubAccountWithHttpInfo($x_sub_account_api_key, $from = null, $to = null)
    {
        $returnType = '\Swagger\Client\Model\ModelsPIPStat[]';
        $request = $this->subAccountStatRouterGetAllAggregatedProviderStatsForASubAccountRequest($x_sub_account_api_key, $from, $to);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ModelsPIPStat[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation subAccountStatRouterGetAllAggregatedProviderStatsForASubAccountAsync
     *
     * 
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subAccountStatRouterGetAllAggregatedProviderStatsForASubAccountAsync($x_sub_account_api_key, $from = null, $to = null)
    {
        return $this->subAccountStatRouterGetAllAggregatedProviderStatsForASubAccountAsyncWithHttpInfo($x_sub_account_api_key, $from, $to)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation subAccountStatRouterGetAllAggregatedProviderStatsForASubAccountAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subAccountStatRouterGetAllAggregatedProviderStatsForASubAccountAsyncWithHttpInfo($x_sub_account_api_key, $from = null, $to = null)
    {
        $returnType = '\Swagger\Client\Model\ModelsPIPStat[]';
        $request = $this->subAccountStatRouterGetAllAggregatedProviderStatsForASubAccountRequest($x_sub_account_api_key, $from, $to);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'subAccountStatRouterGetAllAggregatedProviderStatsForASubAccount'
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function subAccountStatRouterGetAllAggregatedProviderStatsForASubAccountRequest($x_sub_account_api_key, $from = null, $to = null)
    {
        // verify the required parameter 'x_sub_account_api_key' is set
        if ($x_sub_account_api_key === null || (is_array($x_sub_account_api_key) && count($x_sub_account_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_sub_account_api_key when calling subAccountStatRouterGetAllAggregatedProviderStatsForASubAccount'
            );
        }

        $resourcePath = '/subaccount/stat/aggregate/providers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to);
        }
        // header params
        if ($x_sub_account_api_key !== null) {
            $headerParams['X-SubAccount-ApiKey'] = ObjectSerializer::toHeaderValue($x_sub_account_api_key);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation subAccountStatRouterGetAllSubAccountStats
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ModelsRStat[]
     */
    public function subAccountStatRouterGetAllSubAccountStats($x_sub_account_api_key, $from = null, $to = null)
    {
        list($response) = $this->subAccountStatRouterGetAllSubAccountStatsWithHttpInfo($x_sub_account_api_key, $from, $to);
        return $response;
    }

    /**
     * Operation subAccountStatRouterGetAllSubAccountStatsWithHttpInfo
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ModelsRStat[], HTTP status code, HTTP response headers (array of strings)
     */
    public function subAccountStatRouterGetAllSubAccountStatsWithHttpInfo($x_sub_account_api_key, $from = null, $to = null)
    {
        $returnType = '\Swagger\Client\Model\ModelsRStat[]';
        $request = $this->subAccountStatRouterGetAllSubAccountStatsRequest($x_sub_account_api_key, $from, $to);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ModelsRStat[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation subAccountStatRouterGetAllSubAccountStatsAsync
     *
     * 
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subAccountStatRouterGetAllSubAccountStatsAsync($x_sub_account_api_key, $from = null, $to = null)
    {
        return $this->subAccountStatRouterGetAllSubAccountStatsAsyncWithHttpInfo($x_sub_account_api_key, $from, $to)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation subAccountStatRouterGetAllSubAccountStatsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subAccountStatRouterGetAllSubAccountStatsAsyncWithHttpInfo($x_sub_account_api_key, $from = null, $to = null)
    {
        $returnType = '\Swagger\Client\Model\ModelsRStat[]';
        $request = $this->subAccountStatRouterGetAllSubAccountStatsRequest($x_sub_account_api_key, $from, $to);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'subAccountStatRouterGetAllSubAccountStats'
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function subAccountStatRouterGetAllSubAccountStatsRequest($x_sub_account_api_key, $from = null, $to = null)
    {
        // verify the required parameter 'x_sub_account_api_key' is set
        if ($x_sub_account_api_key === null || (is_array($x_sub_account_api_key) && count($x_sub_account_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_sub_account_api_key when calling subAccountStatRouterGetAllSubAccountStats'
            );
        }

        $resourcePath = '/subaccount/stat/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to);
        }
        // header params
        if ($x_sub_account_api_key !== null) {
            $headerParams['X-SubAccount-ApiKey'] = ObjectSerializer::toHeaderValue($x_sub_account_api_key);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation subAccountStatRouterGetAllSubAccountStatsByGroup
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  string $group the tag whose stats you want (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ModelsRStat[]
     */
    public function subAccountStatRouterGetAllSubAccountStatsByGroup($x_sub_account_api_key, $group, $from = null, $to = null)
    {
        list($response) = $this->subAccountStatRouterGetAllSubAccountStatsByGroupWithHttpInfo($x_sub_account_api_key, $group, $from, $to);
        return $response;
    }

    /**
     * Operation subAccountStatRouterGetAllSubAccountStatsByGroupWithHttpInfo
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  string $group the tag whose stats you want (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ModelsRStat[], HTTP status code, HTTP response headers (array of strings)
     */
    public function subAccountStatRouterGetAllSubAccountStatsByGroupWithHttpInfo($x_sub_account_api_key, $group, $from = null, $to = null)
    {
        $returnType = '\Swagger\Client\Model\ModelsRStat[]';
        $request = $this->subAccountStatRouterGetAllSubAccountStatsByGroupRequest($x_sub_account_api_key, $group, $from, $to);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ModelsRStat[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation subAccountStatRouterGetAllSubAccountStatsByGroupAsync
     *
     * 
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  string $group the tag whose stats you want (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subAccountStatRouterGetAllSubAccountStatsByGroupAsync($x_sub_account_api_key, $group, $from = null, $to = null)
    {
        return $this->subAccountStatRouterGetAllSubAccountStatsByGroupAsyncWithHttpInfo($x_sub_account_api_key, $group, $from, $to)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation subAccountStatRouterGetAllSubAccountStatsByGroupAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  string $group the tag whose stats you want (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subAccountStatRouterGetAllSubAccountStatsByGroupAsyncWithHttpInfo($x_sub_account_api_key, $group, $from = null, $to = null)
    {
        $returnType = '\Swagger\Client\Model\ModelsRStat[]';
        $request = $this->subAccountStatRouterGetAllSubAccountStatsByGroupRequest($x_sub_account_api_key, $group, $from, $to);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'subAccountStatRouterGetAllSubAccountStatsByGroup'
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  string $group the tag whose stats you want (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function subAccountStatRouterGetAllSubAccountStatsByGroupRequest($x_sub_account_api_key, $group, $from = null, $to = null)
    {
        // verify the required parameter 'x_sub_account_api_key' is set
        if ($x_sub_account_api_key === null || (is_array($x_sub_account_api_key) && count($x_sub_account_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_sub_account_api_key when calling subAccountStatRouterGetAllSubAccountStatsByGroup'
            );
        }
        // verify the required parameter 'group' is set
        if ($group === null || (is_array($group) && count($group) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group when calling subAccountStatRouterGetAllSubAccountStatsByGroup'
            );
        }

        $resourcePath = '/subaccount/stat/group';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to);
        }
        // query params
        if ($group !== null) {
            $queryParams['group'] = ObjectSerializer::toQueryValue($group);
        }
        // header params
        if ($x_sub_account_api_key !== null) {
            $headerParams['X-SubAccount-ApiKey'] = ObjectSerializer::toHeaderValue($x_sub_account_api_key);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
