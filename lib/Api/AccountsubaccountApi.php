<?php
/**
 * AccountsubaccountApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.16
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * AccountsubaccountApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountsubaccountApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation subAccountRouterCount
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  string $filter_by filterBy (optional)
     * @param  int $filter_value filterValue (optional)
     * @param  string $search search term (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ModelsCountStat
     */
    public function subAccountRouterCount($x_account_api_key, $filter_by = null, $filter_value = null, $search = null)
    {
        list($response) = $this->subAccountRouterCountWithHttpInfo($x_account_api_key, $filter_by, $filter_value, $search);
        return $response;
    }

    /**
     * Operation subAccountRouterCountWithHttpInfo
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  string $filter_by filterBy (optional)
     * @param  int $filter_value filterValue (optional)
     * @param  string $search search term (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ModelsCountStat, HTTP status code, HTTP response headers (array of strings)
     */
    public function subAccountRouterCountWithHttpInfo($x_account_api_key, $filter_by = null, $filter_value = null, $search = null)
    {
        $returnType = '\Swagger\Client\Model\ModelsCountStat';
        $request = $this->subAccountRouterCountRequest($x_account_api_key, $filter_by, $filter_value, $search);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ModelsCountStat',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation subAccountRouterCountAsync
     *
     * 
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  string $filter_by filterBy (optional)
     * @param  int $filter_value filterValue (optional)
     * @param  string $search search term (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subAccountRouterCountAsync($x_account_api_key, $filter_by = null, $filter_value = null, $search = null)
    {
        return $this->subAccountRouterCountAsyncWithHttpInfo($x_account_api_key, $filter_by, $filter_value, $search)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation subAccountRouterCountAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  string $filter_by filterBy (optional)
     * @param  int $filter_value filterValue (optional)
     * @param  string $search search term (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subAccountRouterCountAsyncWithHttpInfo($x_account_api_key, $filter_by = null, $filter_value = null, $search = null)
    {
        $returnType = '\Swagger\Client\Model\ModelsCountStat';
        $request = $this->subAccountRouterCountRequest($x_account_api_key, $filter_by, $filter_value, $search);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'subAccountRouterCount'
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  string $filter_by filterBy (optional)
     * @param  int $filter_value filterValue (optional)
     * @param  string $search search term (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function subAccountRouterCountRequest($x_account_api_key, $filter_by = null, $filter_value = null, $search = null)
    {
        // verify the required parameter 'x_account_api_key' is set
        if ($x_account_api_key === null || (is_array($x_account_api_key) && count($x_account_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_account_api_key when calling subAccountRouterCount'
            );
        }

        $resourcePath = '/account/subaccount/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filter_by !== null) {
            $queryParams['filterBy'] = ObjectSerializer::toQueryValue($filter_by);
        }
        // query params
        if ($filter_value !== null) {
            $queryParams['filterValue'] = ObjectSerializer::toQueryValue($filter_value);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search);
        }
        // header params
        if ($x_account_api_key !== null) {
            $headerParams['X-Account-ApiKey'] = ObjectSerializer::toHeaderValue($x_account_api_key);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation subAccountRouterCreate
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  \Swagger\Client\Model\ModelsESubAccount $body The SubAccount content (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ModelsSubAccount
     */
    public function subAccountRouterCreate($x_account_api_key, $body)
    {
        list($response) = $this->subAccountRouterCreateWithHttpInfo($x_account_api_key, $body);
        return $response;
    }

    /**
     * Operation subAccountRouterCreateWithHttpInfo
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  \Swagger\Client\Model\ModelsESubAccount $body The SubAccount content (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ModelsSubAccount, HTTP status code, HTTP response headers (array of strings)
     */
    public function subAccountRouterCreateWithHttpInfo($x_account_api_key, $body)
    {
        $returnType = '\Swagger\Client\Model\ModelsSubAccount';
        $request = $this->subAccountRouterCreateRequest($x_account_api_key, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ModelsSubAccount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation subAccountRouterCreateAsync
     *
     * 
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  \Swagger\Client\Model\ModelsESubAccount $body The SubAccount content (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subAccountRouterCreateAsync($x_account_api_key, $body)
    {
        return $this->subAccountRouterCreateAsyncWithHttpInfo($x_account_api_key, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation subAccountRouterCreateAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  \Swagger\Client\Model\ModelsESubAccount $body The SubAccount content (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subAccountRouterCreateAsyncWithHttpInfo($x_account_api_key, $body)
    {
        $returnType = '\Swagger\Client\Model\ModelsSubAccount';
        $request = $this->subAccountRouterCreateRequest($x_account_api_key, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'subAccountRouterCreate'
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  \Swagger\Client\Model\ModelsESubAccount $body The SubAccount content (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function subAccountRouterCreateRequest($x_account_api_key, $body)
    {
        // verify the required parameter 'x_account_api_key' is set
        if ($x_account_api_key === null || (is_array($x_account_api_key) && count($x_account_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_account_api_key when calling subAccountRouterCreate'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling subAccountRouterCreate'
            );
        }

        $resourcePath = '/account/subaccount/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_account_api_key !== null) {
            $headerParams['X-Account-ApiKey'] = ObjectSerializer::toHeaderValue($x_account_api_key);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation subAccountRouterDelete
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  int $sub_account_id The SubAccountId you want to delete (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ModelsDeleteResponse
     */
    public function subAccountRouterDelete($x_account_api_key, $sub_account_id)
    {
        list($response) = $this->subAccountRouterDeleteWithHttpInfo($x_account_api_key, $sub_account_id);
        return $response;
    }

    /**
     * Operation subAccountRouterDeleteWithHttpInfo
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  int $sub_account_id The SubAccountId you want to delete (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ModelsDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function subAccountRouterDeleteWithHttpInfo($x_account_api_key, $sub_account_id)
    {
        $returnType = '\Swagger\Client\Model\ModelsDeleteResponse';
        $request = $this->subAccountRouterDeleteRequest($x_account_api_key, $sub_account_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ModelsDeleteResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation subAccountRouterDeleteAsync
     *
     * 
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  int $sub_account_id The SubAccountId you want to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subAccountRouterDeleteAsync($x_account_api_key, $sub_account_id)
    {
        return $this->subAccountRouterDeleteAsyncWithHttpInfo($x_account_api_key, $sub_account_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation subAccountRouterDeleteAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  int $sub_account_id The SubAccountId you want to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subAccountRouterDeleteAsyncWithHttpInfo($x_account_api_key, $sub_account_id)
    {
        $returnType = '\Swagger\Client\Model\ModelsDeleteResponse';
        $request = $this->subAccountRouterDeleteRequest($x_account_api_key, $sub_account_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'subAccountRouterDelete'
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  int $sub_account_id The SubAccountId you want to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function subAccountRouterDeleteRequest($x_account_api_key, $sub_account_id)
    {
        // verify the required parameter 'x_account_api_key' is set
        if ($x_account_api_key === null || (is_array($x_account_api_key) && count($x_account_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_account_api_key when calling subAccountRouterDelete'
            );
        }
        // verify the required parameter 'sub_account_id' is set
        if ($sub_account_id === null || (is_array($sub_account_id) && count($sub_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sub_account_id when calling subAccountRouterDelete'
            );
        }

        $resourcePath = '/account/subaccount/{subAccountId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_account_api_key !== null) {
            $headerParams['X-Account-ApiKey'] = ObjectSerializer::toHeaderValue($x_account_api_key);
        }

        // path params
        if ($sub_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'subAccountId' . '}',
                ObjectSerializer::toPathValue($sub_account_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation subAccountRouterGet
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  int $sub_account_id the SubAccountId you want to get (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ModelsSubAccount
     */
    public function subAccountRouterGet($x_account_api_key, $sub_account_id)
    {
        list($response) = $this->subAccountRouterGetWithHttpInfo($x_account_api_key, $sub_account_id);
        return $response;
    }

    /**
     * Operation subAccountRouterGetWithHttpInfo
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  int $sub_account_id the SubAccountId you want to get (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ModelsSubAccount, HTTP status code, HTTP response headers (array of strings)
     */
    public function subAccountRouterGetWithHttpInfo($x_account_api_key, $sub_account_id)
    {
        $returnType = '\Swagger\Client\Model\ModelsSubAccount';
        $request = $this->subAccountRouterGetRequest($x_account_api_key, $sub_account_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ModelsSubAccount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation subAccountRouterGetAsync
     *
     * 
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  int $sub_account_id the SubAccountId you want to get (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subAccountRouterGetAsync($x_account_api_key, $sub_account_id)
    {
        return $this->subAccountRouterGetAsyncWithHttpInfo($x_account_api_key, $sub_account_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation subAccountRouterGetAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  int $sub_account_id the SubAccountId you want to get (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subAccountRouterGetAsyncWithHttpInfo($x_account_api_key, $sub_account_id)
    {
        $returnType = '\Swagger\Client\Model\ModelsSubAccount';
        $request = $this->subAccountRouterGetRequest($x_account_api_key, $sub_account_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'subAccountRouterGet'
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  int $sub_account_id the SubAccountId you want to get (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function subAccountRouterGetRequest($x_account_api_key, $sub_account_id)
    {
        // verify the required parameter 'x_account_api_key' is set
        if ($x_account_api_key === null || (is_array($x_account_api_key) && count($x_account_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_account_api_key when calling subAccountRouterGet'
            );
        }
        // verify the required parameter 'sub_account_id' is set
        if ($sub_account_id === null || (is_array($sub_account_id) && count($sub_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sub_account_id when calling subAccountRouterGet'
            );
        }

        $resourcePath = '/account/subaccount/{subAccountId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_account_api_key !== null) {
            $headerParams['X-Account-ApiKey'] = ObjectSerializer::toHeaderValue($x_account_api_key);
        }

        // path params
        if ($sub_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'subAccountId' . '}',
                ObjectSerializer::toPathValue($sub_account_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation subAccountRouterGetAll
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $filter_by filterBy (optional)
     * @param  int $filter_value filterValue (optional)
     * @param  string $search search term (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ModelsSubAccount[]
     */
    public function subAccountRouterGetAll($x_account_api_key, $offset = null, $limit = null, $filter_by = null, $filter_value = null, $search = null)
    {
        list($response) = $this->subAccountRouterGetAllWithHttpInfo($x_account_api_key, $offset, $limit, $filter_by, $filter_value, $search);
        return $response;
    }

    /**
     * Operation subAccountRouterGetAllWithHttpInfo
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $filter_by filterBy (optional)
     * @param  int $filter_value filterValue (optional)
     * @param  string $search search term (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ModelsSubAccount[], HTTP status code, HTTP response headers (array of strings)
     */
    public function subAccountRouterGetAllWithHttpInfo($x_account_api_key, $offset = null, $limit = null, $filter_by = null, $filter_value = null, $search = null)
    {
        $returnType = '\Swagger\Client\Model\ModelsSubAccount[]';
        $request = $this->subAccountRouterGetAllRequest($x_account_api_key, $offset, $limit, $filter_by, $filter_value, $search);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ModelsSubAccount[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation subAccountRouterGetAllAsync
     *
     * 
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $filter_by filterBy (optional)
     * @param  int $filter_value filterValue (optional)
     * @param  string $search search term (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subAccountRouterGetAllAsync($x_account_api_key, $offset = null, $limit = null, $filter_by = null, $filter_value = null, $search = null)
    {
        return $this->subAccountRouterGetAllAsyncWithHttpInfo($x_account_api_key, $offset, $limit, $filter_by, $filter_value, $search)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation subAccountRouterGetAllAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $filter_by filterBy (optional)
     * @param  int $filter_value filterValue (optional)
     * @param  string $search search term (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subAccountRouterGetAllAsyncWithHttpInfo($x_account_api_key, $offset = null, $limit = null, $filter_by = null, $filter_value = null, $search = null)
    {
        $returnType = '\Swagger\Client\Model\ModelsSubAccount[]';
        $request = $this->subAccountRouterGetAllRequest($x_account_api_key, $offset, $limit, $filter_by, $filter_value, $search);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'subAccountRouterGetAll'
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $filter_by filterBy (optional)
     * @param  int $filter_value filterValue (optional)
     * @param  string $search search term (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function subAccountRouterGetAllRequest($x_account_api_key, $offset = null, $limit = null, $filter_by = null, $filter_value = null, $search = null)
    {
        // verify the required parameter 'x_account_api_key' is set
        if ($x_account_api_key === null || (is_array($x_account_api_key) && count($x_account_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_account_api_key when calling subAccountRouterGetAll'
            );
        }

        $resourcePath = '/account/subaccount/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($filter_by !== null) {
            $queryParams['filterBy'] = ObjectSerializer::toQueryValue($filter_by);
        }
        // query params
        if ($filter_value !== null) {
            $queryParams['filterValue'] = ObjectSerializer::toQueryValue($filter_value);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search);
        }
        // header params
        if ($x_account_api_key !== null) {
            $headerParams['X-Account-ApiKey'] = ObjectSerializer::toHeaderValue($x_account_api_key);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation subAccountRouterUpdate
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  int $sub_account_id The SubAccountId you want to update (required)
     * @param  \Swagger\Client\Model\ModelsESubAccount $body The body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ModelsSubAccount
     */
    public function subAccountRouterUpdate($x_account_api_key, $sub_account_id, $body)
    {
        list($response) = $this->subAccountRouterUpdateWithHttpInfo($x_account_api_key, $sub_account_id, $body);
        return $response;
    }

    /**
     * Operation subAccountRouterUpdateWithHttpInfo
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  int $sub_account_id The SubAccountId you want to update (required)
     * @param  \Swagger\Client\Model\ModelsESubAccount $body The body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ModelsSubAccount, HTTP status code, HTTP response headers (array of strings)
     */
    public function subAccountRouterUpdateWithHttpInfo($x_account_api_key, $sub_account_id, $body)
    {
        $returnType = '\Swagger\Client\Model\ModelsSubAccount';
        $request = $this->subAccountRouterUpdateRequest($x_account_api_key, $sub_account_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ModelsSubAccount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation subAccountRouterUpdateAsync
     *
     * 
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  int $sub_account_id The SubAccountId you want to update (required)
     * @param  \Swagger\Client\Model\ModelsESubAccount $body The body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subAccountRouterUpdateAsync($x_account_api_key, $sub_account_id, $body)
    {
        return $this->subAccountRouterUpdateAsyncWithHttpInfo($x_account_api_key, $sub_account_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation subAccountRouterUpdateAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  int $sub_account_id The SubAccountId you want to update (required)
     * @param  \Swagger\Client\Model\ModelsESubAccount $body The body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function subAccountRouterUpdateAsyncWithHttpInfo($x_account_api_key, $sub_account_id, $body)
    {
        $returnType = '\Swagger\Client\Model\ModelsSubAccount';
        $request = $this->subAccountRouterUpdateRequest($x_account_api_key, $sub_account_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'subAccountRouterUpdate'
     *
     * @param  string $x_account_api_key Account API Key (required)
     * @param  int $sub_account_id The SubAccountId you want to update (required)
     * @param  \Swagger\Client\Model\ModelsESubAccount $body The body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function subAccountRouterUpdateRequest($x_account_api_key, $sub_account_id, $body)
    {
        // verify the required parameter 'x_account_api_key' is set
        if ($x_account_api_key === null || (is_array($x_account_api_key) && count($x_account_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_account_api_key when calling subAccountRouterUpdate'
            );
        }
        // verify the required parameter 'sub_account_id' is set
        if ($sub_account_id === null || (is_array($sub_account_id) && count($sub_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sub_account_id when calling subAccountRouterUpdate'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling subAccountRouterUpdate'
            );
        }

        $resourcePath = '/account/subaccount/{subAccountId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_account_api_key !== null) {
            $headerParams['X-Account-ApiKey'] = ObjectSerializer::toHeaderValue($x_account_api_key);
        }

        // path params
        if ($sub_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'subAccountId' . '}',
                ObjectSerializer::toPathValue($sub_account_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
