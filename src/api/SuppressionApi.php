<?php
/**
 * SuppressionApi
 * PHP version 7.4
 *
 * @category Class
 * @package  sendpost
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SendPost API
 *
 * Email API and SMTP relay to not just send and measure email sending, but also alert and optimise. We provide you with tools, expertise and support needed to reliably deliver emails to your customers inboxes on time, every time.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@sendpost.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace sendpost\api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use sendpost\ApiException;
use sendpost\Configuration;
use sendpost\HeaderSelector;
use sendpost\ObjectSerializer;

/**
 * SuppressionApi Class Doc Comment
 *
 * @category Class
 * @package  sendpost
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SuppressionApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'count' => [
            'application/json',
        ],
        'createSuppressions' => [
            'application/json',
        ],
        'deleteSuppression' => [
            'application/json',
        ],
        'getSuppressions' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation count
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['count'] to see the possible values for this operation
     *
     * @throws \sendpost\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \sendpost\model\CountStat
     */
    public function count($x_sub_account_api_key, $from = null, $to = null, string $contentType = self::contentTypes['count'][0])
    {
        list($response) = $this->countWithHttpInfo($x_sub_account_api_key, $from, $to, $contentType);
        return $response;
    }

    /**
     * Operation countWithHttpInfo
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['count'] to see the possible values for this operation
     *
     * @throws \sendpost\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \sendpost\model\CountStat, HTTP status code, HTTP response headers (array of strings)
     */
    public function countWithHttpInfo($x_sub_account_api_key, $from = null, $to = null, string $contentType = self::contentTypes['count'][0])
    {
        $request = $this->countRequest($x_sub_account_api_key, $from, $to, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\sendpost\model\CountStat' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\sendpost\model\CountStat' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\sendpost\model\CountStat', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\sendpost\model\CountStat';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\sendpost\model\CountStat',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation countAsync
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['count'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function countAsync($x_sub_account_api_key, $from = null, $to = null, string $contentType = self::contentTypes['count'][0])
    {
        return $this->countAsyncWithHttpInfo($x_sub_account_api_key, $from, $to, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation countAsyncWithHttpInfo
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['count'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function countAsyncWithHttpInfo($x_sub_account_api_key, $from = null, $to = null, string $contentType = self::contentTypes['count'][0])
    {
        $returnType = '\sendpost\model\CountStat';
        $request = $this->countRequest($x_sub_account_api_key, $from, $to, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'count'
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['count'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function countRequest($x_sub_account_api_key, $from = null, $to = null, string $contentType = self::contentTypes['count'][0])
    {

        // verify the required parameter 'x_sub_account_api_key' is set
        if ($x_sub_account_api_key === null || (is_array($x_sub_account_api_key) && count($x_sub_account_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_sub_account_api_key when calling count'
            );
        }




        $resourcePath = '/subaccount/suppression/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_sub_account_api_key !== null) {
            $headerParams['X-SubAccount-ApiKey'] = ObjectSerializer::toHeaderValue($x_sub_account_api_key);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createSuppressions
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  \sendpost\model\RSuppression $r_suppression Suppression content (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSuppressions'] to see the possible values for this operation
     *
     * @throws \sendpost\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \sendpost\model\Suppression[]
     */
    public function createSuppressions($x_sub_account_api_key, $r_suppression = null, string $contentType = self::contentTypes['createSuppressions'][0])
    {
        list($response) = $this->createSuppressionsWithHttpInfo($x_sub_account_api_key, $r_suppression, $contentType);
        return $response;
    }

    /**
     * Operation createSuppressionsWithHttpInfo
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  \sendpost\model\RSuppression $r_suppression Suppression content (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSuppressions'] to see the possible values for this operation
     *
     * @throws \sendpost\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \sendpost\model\Suppression[], HTTP status code, HTTP response headers (array of strings)
     */
    public function createSuppressionsWithHttpInfo($x_sub_account_api_key, $r_suppression = null, string $contentType = self::contentTypes['createSuppressions'][0])
    {
        $request = $this->createSuppressionsRequest($x_sub_account_api_key, $r_suppression, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\sendpost\model\Suppression[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\sendpost\model\Suppression[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\sendpost\model\Suppression[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\sendpost\model\Suppression[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\sendpost\model\Suppression[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createSuppressionsAsync
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  \sendpost\model\RSuppression $r_suppression Suppression content (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSuppressions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSuppressionsAsync($x_sub_account_api_key, $r_suppression = null, string $contentType = self::contentTypes['createSuppressions'][0])
    {
        return $this->createSuppressionsAsyncWithHttpInfo($x_sub_account_api_key, $r_suppression, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createSuppressionsAsyncWithHttpInfo
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  \sendpost\model\RSuppression $r_suppression Suppression content (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSuppressions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSuppressionsAsyncWithHttpInfo($x_sub_account_api_key, $r_suppression = null, string $contentType = self::contentTypes['createSuppressions'][0])
    {
        $returnType = '\sendpost\model\Suppression[]';
        $request = $this->createSuppressionsRequest($x_sub_account_api_key, $r_suppression, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createSuppressions'
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  \sendpost\model\RSuppression $r_suppression Suppression content (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSuppressions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createSuppressionsRequest($x_sub_account_api_key, $r_suppression = null, string $contentType = self::contentTypes['createSuppressions'][0])
    {

        // verify the required parameter 'x_sub_account_api_key' is set
        if ($x_sub_account_api_key === null || (is_array($x_sub_account_api_key) && count($x_sub_account_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_sub_account_api_key when calling createSuppressions'
            );
        }



        $resourcePath = '/subaccount/suppression/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_sub_account_api_key !== null) {
            $headerParams['X-SubAccount-ApiKey'] = ObjectSerializer::toHeaderValue($x_sub_account_api_key);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($r_suppression)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($r_suppression));
            } else {
                $httpBody = $r_suppression;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteSuppression
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  \sendpost\model\RDSuppression $rd_suppression Suppression content (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSuppression'] to see the possible values for this operation
     *
     * @throws \sendpost\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \sendpost\model\DeleteResponse[]
     */
    public function deleteSuppression($x_sub_account_api_key, $rd_suppression = null, string $contentType = self::contentTypes['deleteSuppression'][0])
    {
        list($response) = $this->deleteSuppressionWithHttpInfo($x_sub_account_api_key, $rd_suppression, $contentType);
        return $response;
    }

    /**
     * Operation deleteSuppressionWithHttpInfo
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  \sendpost\model\RDSuppression $rd_suppression Suppression content (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSuppression'] to see the possible values for this operation
     *
     * @throws \sendpost\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \sendpost\model\DeleteResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSuppressionWithHttpInfo($x_sub_account_api_key, $rd_suppression = null, string $contentType = self::contentTypes['deleteSuppression'][0])
    {
        $request = $this->deleteSuppressionRequest($x_sub_account_api_key, $rd_suppression, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\sendpost\model\DeleteResponse[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\sendpost\model\DeleteResponse[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\sendpost\model\DeleteResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\sendpost\model\DeleteResponse[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\sendpost\model\DeleteResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteSuppressionAsync
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  \sendpost\model\RDSuppression $rd_suppression Suppression content (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSuppression'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSuppressionAsync($x_sub_account_api_key, $rd_suppression = null, string $contentType = self::contentTypes['deleteSuppression'][0])
    {
        return $this->deleteSuppressionAsyncWithHttpInfo($x_sub_account_api_key, $rd_suppression, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteSuppressionAsyncWithHttpInfo
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  \sendpost\model\RDSuppression $rd_suppression Suppression content (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSuppression'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSuppressionAsyncWithHttpInfo($x_sub_account_api_key, $rd_suppression = null, string $contentType = self::contentTypes['deleteSuppression'][0])
    {
        $returnType = '\sendpost\model\DeleteResponse[]';
        $request = $this->deleteSuppressionRequest($x_sub_account_api_key, $rd_suppression, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteSuppression'
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  \sendpost\model\RDSuppression $rd_suppression Suppression content (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSuppression'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteSuppressionRequest($x_sub_account_api_key, $rd_suppression = null, string $contentType = self::contentTypes['deleteSuppression'][0])
    {

        // verify the required parameter 'x_sub_account_api_key' is set
        if ($x_sub_account_api_key === null || (is_array($x_sub_account_api_key) && count($x_sub_account_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_sub_account_api_key when calling deleteSuppression'
            );
        }



        $resourcePath = '/subaccount/suppression/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_sub_account_api_key !== null) {
            $headerParams['X-SubAccount-ApiKey'] = ObjectSerializer::toHeaderValue($x_sub_account_api_key);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($rd_suppression)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($rd_suppression));
            } else {
                $httpBody = $rd_suppression;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSuppressions
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $search search (optional)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSuppressions'] to see the possible values for this operation
     *
     * @throws \sendpost\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \sendpost\model\Suppression[]
     */
    public function getSuppressions($x_sub_account_api_key, $offset = null, $limit = null, $search = null, $from = null, $to = null, string $contentType = self::contentTypes['getSuppressions'][0])
    {
        list($response) = $this->getSuppressionsWithHttpInfo($x_sub_account_api_key, $offset, $limit, $search, $from, $to, $contentType);
        return $response;
    }

    /**
     * Operation getSuppressionsWithHttpInfo
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $search search (optional)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSuppressions'] to see the possible values for this operation
     *
     * @throws \sendpost\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \sendpost\model\Suppression[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getSuppressionsWithHttpInfo($x_sub_account_api_key, $offset = null, $limit = null, $search = null, $from = null, $to = null, string $contentType = self::contentTypes['getSuppressions'][0])
    {
        $request = $this->getSuppressionsRequest($x_sub_account_api_key, $offset, $limit, $search, $from, $to, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\sendpost\model\Suppression[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\sendpost\model\Suppression[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\sendpost\model\Suppression[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\sendpost\model\Suppression[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\sendpost\model\Suppression[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSuppressionsAsync
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $search search (optional)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSuppressions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSuppressionsAsync($x_sub_account_api_key, $offset = null, $limit = null, $search = null, $from = null, $to = null, string $contentType = self::contentTypes['getSuppressions'][0])
    {
        return $this->getSuppressionsAsyncWithHttpInfo($x_sub_account_api_key, $offset, $limit, $search, $from, $to, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSuppressionsAsyncWithHttpInfo
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $search search (optional)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSuppressions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSuppressionsAsyncWithHttpInfo($x_sub_account_api_key, $offset = null, $limit = null, $search = null, $from = null, $to = null, string $contentType = self::contentTypes['getSuppressions'][0])
    {
        $returnType = '\sendpost\model\Suppression[]';
        $request = $this->getSuppressionsRequest($x_sub_account_api_key, $offset, $limit, $search, $from, $to, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSuppressions'
     *
     * @param  string $x_sub_account_api_key Sub-Account API Key (required)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $search search (optional)
     * @param  string $from from date (optional)
     * @param  string $to to date (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSuppressions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSuppressionsRequest($x_sub_account_api_key, $offset = null, $limit = null, $search = null, $from = null, $to = null, string $contentType = self::contentTypes['getSuppressions'][0])
    {

        // verify the required parameter 'x_sub_account_api_key' is set
        if ($x_sub_account_api_key === null || (is_array($x_sub_account_api_key) && count($x_sub_account_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_sub_account_api_key when calling getSuppressions'
            );
        }







        $resourcePath = '/subaccount/suppression/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_sub_account_api_key !== null) {
            $headerParams['X-SubAccount-ApiKey'] = ObjectSerializer::toHeaderValue($x_sub_account_api_key);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
